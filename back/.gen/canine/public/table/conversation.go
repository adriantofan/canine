//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/postgres"
)

var Conversation = newConversationTable("public", "conversation", "")

type conversationTable struct {
	postgres.Table

	// Columns
	ID            postgres.ColumnInteger
	User1ID       postgres.ColumnInteger
	User2ID       postgres.ColumnInteger
	CreatedAt     postgres.ColumnTimestamp
	LastMessageID postgres.ColumnInteger

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
}

type ConversationTable struct {
	conversationTable

	EXCLUDED conversationTable
}

// AS creates new ConversationTable with assigned alias
func (a ConversationTable) AS(alias string) *ConversationTable {
	return newConversationTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new ConversationTable with assigned schema name
func (a ConversationTable) FromSchema(schemaName string) *ConversationTable {
	return newConversationTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new ConversationTable with assigned table prefix
func (a ConversationTable) WithPrefix(prefix string) *ConversationTable {
	return newConversationTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new ConversationTable with assigned table suffix
func (a ConversationTable) WithSuffix(suffix string) *ConversationTable {
	return newConversationTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newConversationTable(schemaName, tableName, alias string) *ConversationTable {
	return &ConversationTable{
		conversationTable: newConversationTableImpl(schemaName, tableName, alias),
		EXCLUDED:          newConversationTableImpl("", "excluded", ""),
	}
}

func newConversationTableImpl(schemaName, tableName, alias string) conversationTable {
	var (
		IDColumn            = postgres.IntegerColumn("id")
		User1IDColumn       = postgres.IntegerColumn("user1_id")
		User2IDColumn       = postgres.IntegerColumn("user2_id")
		CreatedAtColumn     = postgres.TimestampColumn("created_at")
		LastMessageIDColumn = postgres.IntegerColumn("last_message_id")
		allColumns          = postgres.ColumnList{IDColumn, User1IDColumn, User2IDColumn, CreatedAtColumn, LastMessageIDColumn}
		mutableColumns      = postgres.ColumnList{User1IDColumn, User2IDColumn, CreatedAtColumn, LastMessageIDColumn}
	)

	return conversationTable{
		Table: postgres.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:            IDColumn,
		User1ID:       User1IDColumn,
		User2ID:       User2IDColumn,
		CreatedAt:     CreatedAtColumn,
		LastMessageID: LastMessageIDColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
