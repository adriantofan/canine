//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/postgres"
)

var Conversation = newConversationTable("public", "conversation", "")

type conversationTable struct {
	postgres.Table

	// Columns
	ID             postgres.ColumnInteger
	WorkspaceID    postgres.ColumnInteger
	ExternalUserID postgres.ColumnInteger
	Name           postgres.ColumnString
	CreatedAt      postgres.ColumnTimestamp
	UpdatedAt      postgres.ColumnTimestamp
	UpdatedSeq     postgres.ColumnInteger
	Archived       postgres.ColumnBool
	LastMessageID  postgres.ColumnInteger

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
}

type ConversationTable struct {
	conversationTable

	EXCLUDED conversationTable
}

// AS creates new ConversationTable with assigned alias
func (a ConversationTable) AS(alias string) *ConversationTable {
	return newConversationTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new ConversationTable with assigned schema name
func (a ConversationTable) FromSchema(schemaName string) *ConversationTable {
	return newConversationTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new ConversationTable with assigned table prefix
func (a ConversationTable) WithPrefix(prefix string) *ConversationTable {
	return newConversationTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new ConversationTable with assigned table suffix
func (a ConversationTable) WithSuffix(suffix string) *ConversationTable {
	return newConversationTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newConversationTable(schemaName, tableName, alias string) *ConversationTable {
	return &ConversationTable{
		conversationTable: newConversationTableImpl(schemaName, tableName, alias),
		EXCLUDED:          newConversationTableImpl("", "excluded", ""),
	}
}

func newConversationTableImpl(schemaName, tableName, alias string) conversationTable {
	var (
		IDColumn             = postgres.IntegerColumn("id")
		WorkspaceIDColumn    = postgres.IntegerColumn("workspace_id")
		ExternalUserIDColumn = postgres.IntegerColumn("external_user_id")
		NameColumn           = postgres.StringColumn("name")
		CreatedAtColumn      = postgres.TimestampColumn("created_at")
		UpdatedAtColumn      = postgres.TimestampColumn("updated_at")
		UpdatedSeqColumn     = postgres.IntegerColumn("updated_seq")
		ArchivedColumn       = postgres.BoolColumn("archived")
		LastMessageIDColumn  = postgres.IntegerColumn("last_message_id")
		allColumns           = postgres.ColumnList{IDColumn, WorkspaceIDColumn, ExternalUserIDColumn, NameColumn, CreatedAtColumn, UpdatedAtColumn, UpdatedSeqColumn, ArchivedColumn, LastMessageIDColumn}
		mutableColumns       = postgres.ColumnList{WorkspaceIDColumn, ExternalUserIDColumn, NameColumn, CreatedAtColumn, UpdatedAtColumn, UpdatedSeqColumn, ArchivedColumn, LastMessageIDColumn}
	)

	return conversationTable{
		Table: postgres.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:             IDColumn,
		WorkspaceID:    WorkspaceIDColumn,
		ExternalUserID: ExternalUserIDColumn,
		Name:           NameColumn,
		CreatedAt:      CreatedAtColumn,
		UpdatedAt:      UpdatedAtColumn,
		UpdatedSeq:     UpdatedSeqColumn,
		Archived:       ArchivedColumn,
		LastMessageID:  LastMessageIDColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
