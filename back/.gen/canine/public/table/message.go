//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/postgres"
)

var Message = newMessageTable("public", "message", "")

type messageTable struct {
	postgres.Table

	// Columns
	ID             postgres.ColumnInteger
	ConversationID postgres.ColumnInteger
	SenderID       postgres.ColumnInteger
	Message        postgres.ColumnString
	CreatedAt      postgres.ColumnTimestamp

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
}

type MessageTable struct {
	messageTable

	EXCLUDED messageTable
}

// AS creates new MessageTable with assigned alias
func (a MessageTable) AS(alias string) *MessageTable {
	return newMessageTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new MessageTable with assigned schema name
func (a MessageTable) FromSchema(schemaName string) *MessageTable {
	return newMessageTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new MessageTable with assigned table prefix
func (a MessageTable) WithPrefix(prefix string) *MessageTable {
	return newMessageTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new MessageTable with assigned table suffix
func (a MessageTable) WithSuffix(suffix string) *MessageTable {
	return newMessageTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newMessageTable(schemaName, tableName, alias string) *MessageTable {
	return &MessageTable{
		messageTable: newMessageTableImpl(schemaName, tableName, alias),
		EXCLUDED:     newMessageTableImpl("", "excluded", ""),
	}
}

func newMessageTableImpl(schemaName, tableName, alias string) messageTable {
	var (
		IDColumn             = postgres.IntegerColumn("id")
		ConversationIDColumn = postgres.IntegerColumn("conversation_id")
		SenderIDColumn       = postgres.IntegerColumn("sender_id")
		MessageColumn        = postgres.StringColumn("message")
		CreatedAtColumn      = postgres.TimestampColumn("created_at")
		allColumns           = postgres.ColumnList{IDColumn, ConversationIDColumn, SenderIDColumn, MessageColumn, CreatedAtColumn}
		mutableColumns       = postgres.ColumnList{ConversationIDColumn, SenderIDColumn, MessageColumn, CreatedAtColumn}
	)

	return messageTable{
		Table: postgres.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:             IDColumn,
		ConversationID: ConversationIDColumn,
		SenderID:       SenderIDColumn,
		Message:        MessageColumn,
		CreatedAt:      CreatedAtColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
